{"dependencies":[],"generated":{"js":"(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define(factory);\r\n  } else if (typeof exports === 'object') {\r\n    // Node. Does not work with strict CommonJS, but\r\n    // only CommonJS-like enviroments that support module.exports,\r\n    // like Node.\r\n    module.exports = factory();\r\n  } else {\r\n    // Browser globals (root is window)\r\n    root.Sparkline = factory();\r\n  }\r\n}(window, function () {\r\n  function extend(specific, general) {\r\n    var obj = {};\r\n    for (var key in general) {\r\n      obj[key] = key in specific ? specific[key] : general[key];\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  function Sparkline(element, options) {\r\n    this.element = element;\r\n    this.options = extend(options || {}, Sparkline.options);\r\n\r\n    init: {\r\n      this.element.innerHTML = \"<canvas></canvas>\";\r\n      this.canvas = this.element.firstChild;\r\n      this.context = this.canvas.getContext(\"2d\");\r\n      this.ratio = window.devicePixelRatio || 1;\r\n\r\n      if (this.options.tooltip) {\r\n        this.canvas.style.position = \"relative\";\r\n        this.canvas.onmousemove = showTooltip.bind(this);\r\n      }\r\n    }\r\n  }\r\n\r\n  Sparkline.options = {\r\n    width: 100,\r\n    height: null,\r\n    lineColor: \"black\",\r\n    lineWidth: 1.5,\r\n    startColor: \"transparent\",\r\n    endColor: \"black\",\r\n    maxColor: \"transparent\",\r\n    minColor: \"transparent\",\r\n    minValue: null,\r\n    maxValue: null,\r\n    minMaxValue: null,\r\n    maxMinValue: null,\r\n    dotRadius: 2.5,\r\n    tooltip: null,\r\n    fillBelow: true,\r\n    fillLighten: 0.5,\r\n    startLine: false,\r\n    endLine: false,\r\n    minLine: false,\r\n    maxLine: false,\r\n    bottomLine: false,\r\n    topLine: false,\r\n    averageLine: false\r\n  };\r\n\r\n  Sparkline.init = function (element, options) {\r\n    return new Sparkline(element, options);\r\n  };\r\n\r\n  Sparkline.draw = function (element, points, options) {\r\n    var sparkline = new Sparkline(element, options);\r\n    sparkline.draw(points);\r\n    return sparkline;\r\n  }\r\n\r\n  function getY(minValue, maxValue, offsetY, height, index) {\r\n    var range = maxValue - minValue;\r\n    if (range == 0) {\r\n      return offsetY + height / 2;\r\n    } else {\r\n      return (offsetY + height) - ((this[index] - minValue) / range) * height;\r\n    }\r\n  }\r\n\r\n  function drawDot(radius, x1, x2, color, line, x, y) {\r\n    this.context.beginPath();\r\n    this.context.fillStyle = color;\r\n    this.context.arc(x, y, radius, 0, Math.PI * 2, false);\r\n    this.context.fill();\r\n    drawLine.call(this, x1, x2, line, x, y);\r\n  }\r\n\r\n  function drawLine(x1, x2, style, x, y){\r\n    if(!style) return;\r\n\r\n    this.context.save();\r\n    this.context.strokeStyle = style.color || 'black';\r\n    this.context.lineWidth = (style.width || 1) * this.ratio;\r\n    this.context.globalAlpha = style.alpha || 1;\r\n    this.context.beginPath();\r\n    this.context.moveTo(style.direction != 'right' ? x1 : x, y);\r\n    this.context.lineTo(style.direction != 'left' ? x2 : x, y);\r\n    this.context.stroke();\r\n    this.context.restore();\r\n  }\r\n\r\n  function showTooltip(e) {\r\n    var x = e.offsetX || e.layerX || 0;\r\n    var delta = ((this.options.width - this.options.dotRadius * 2) / (this.points.length - 1));\r\n    var index = minmax(0, Math.round((x - this.options.dotRadius) / delta), this.points.length - 1);\r\n\r\n    this.canvas.title = this.options.tooltip(this.points[index], index, this.points);\r\n  }\r\n\r\n  Sparkline.prototype.draw = function (points) {\r\n\r\n    points = points || [];\r\n    this.points = points;\r\n\r\n    this.canvas.width = this.options.width * this.ratio;\r\n    this.canvas.style.width = this.options.width + 'px';\r\n\r\n    var pxHeight = this.options.height || this.element.offsetHeight;\r\n    this.canvas.height = pxHeight * this.ratio;\r\n    this.canvas.style.height = pxHeight + 'px';\r\n\r\n    var lineWidth = this.options.lineWidth * this.ratio;\r\n    var offsetX = Math.max(this.options.dotRadius * this.ratio, lineWidth/2);\r\n    var offsetY = Math.max(this.options.dotRadius * this.ratio, lineWidth/2);\r\n    var width = this.canvas.width - offsetX * 2;\r\n    var height = this.canvas.height - offsetY * 2;\r\n\r\n    var minValue = Math.min.apply(Math, points);\r\n    var maxValue = Math.max.apply(Math, points);\r\n    var bottomValue = this.options.minValue != undefined ? this.options.minValue : Math.min(minValue, this.options.maxMinValue != undefined ? this.options.maxMinValue : minValue);\r\n    var topValue = this.options.maxValue != undefined ? this.options.maxValue : Math.max(maxValue, this.options.minMaxValue != undefined ? this.options.minMaxValue : maxValue);\r\n    var minX = offsetX;\r\n    var maxX = offsetX;\r\n\r\n    var x = offsetX;\r\n    var y = getY.bind(points, bottomValue, topValue, offsetY, height);\r\n    var delta = width / (points.length - 1);\r\n\r\n    var dot = drawDot.bind(this, this.options.dotRadius * this.ratio, offsetX, width + offsetX);\r\n    var line = drawLine.bind(this, offsetX, width + offsetX);\r\n\r\n    this.context.save();\r\n\r\n    this.context.strokeStyle = this.options.lineColor;\r\n    this.context.fillStyle = this.options.lineColor;\r\n    this.context.lineWidth = lineWidth;\r\n    this.context.lineCap = 'round';\r\n    this.context.lineJoin = 'round';\r\n\r\n    if(this.options.fillBelow && points.length > 1){\r\n      this.context.save();\r\n      this.context.beginPath();\r\n      this.context.moveTo(x, y(0));\r\n      for (var i = 1; i < points.length; i++) {\r\n        x += delta;\r\n\r\n        minX = points[i] == minValue ? x : minX;\r\n        maxX = points[i] == maxValue ? x : maxX;\r\n\r\n        this.context.lineTo(x, y(i));\r\n      }\r\n      this.context.lineTo(width+offsetX, height + offsetY + lineWidth/2);\r\n      this.context.lineTo(offsetX, height + offsetY + lineWidth/2);\r\n      this.context.fill();\r\n      if(this.options.fillLighten > 0){\r\n        this.context.fillStyle = 'white';\r\n        this.context.globalAlpha = this.options.fillLighten;\r\n        this.context.fill();\r\n        this.context.globalAlpha = 1;\r\n      }else if(this.options.fillLighten < 0){\r\n        this.context.fillStyle = 'black';\r\n        this.context.globalAlpha = -this.options.fillLighten;\r\n        this.context.fill();\r\n      }\r\n      this.context.restore();\r\n    }\r\n\r\n    x = offsetX;\r\n    this.context.beginPath();\r\n    this.context.moveTo(x, y(0));\r\n    for (var i = 1; i < points.length; i++) {\r\n      x += delta;\r\n      this.context.lineTo(x, y(i));\r\n    }\r\n    this.context.stroke();\r\n\r\n    this.context.restore();\r\n\r\n    line(this.options.bottomLine, 0, offsetY);\r\n    line(this.options.topLine, 0, height + offsetY+lineWidth/2);\r\n\r\n    dot(this.options.startColor, this.options.startLine, offsetX + (points.length == 1 ? width / 2 : 0), y(0));\r\n    dot(this.options.endColor, this.options.endLine, offsetX + (points.length == 1 ? width / 2 : width), y(points.length-1));\r\n    dot(this.options.minColor, this.options.minLine, minX + (points.length == 1 ? width / 2 : 0), y(points.indexOf(minValue)));\r\n    dot(this.options.maxColor, this.options.maxLine, maxX + (points.length == 1 ? width / 2 : 0), y(points.indexOf(maxValue)));\r\n\r\n    //line(this.options.averageLine, )\r\n  }\r\n\r\n  function minmax(a, b, c) {\r\n    return Math.max(a, Math.min(b, c));\r\n  }\r\n\r\n  return Sparkline;\r\n}));\r\n"},"hash":"de76e7ca122a93fd6795065beacd720a"}